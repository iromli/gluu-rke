apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-controller-leader-nginx
  namespace: gluu
data:
  use-http2: "false"

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gluu-ingress-base
  namespace: gluu
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/app-root: "/identity"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "route"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
spec:
  tls:
    - hosts:
      - demoexample.gluu.org
      secretName: tls-certificate
  rules:
  - host: demoexample.gluu.org
    http:
      paths:
      - path: /
        backend:
          serviceName: oxtrust
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gluu-ingress-openid-configuration
  namespace: gluu
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/openid-configuration /oxauth/.well-known/openid-configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/.well-known/openid-configuration
spec:
  tls:
    - hosts:
      - demoexample.gluu.org
      secretName: tls-certificate
  rules:
  - host: demoexample.gluu.org
    http:
      paths:
      - path: /.well-known/openid-configuration
        backend:
          serviceName: oxauth
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gluu-ingress-uma2-configuration
  namespace: gluu
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/uma2-configuration /oxauth/restv1/uma2-configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/restv1/uma2-configuration
spec:
  tls:
    - hosts:
      - demoexample.gluu.org
      secretName: tls-certificate
  rules:
  - host: demoexample.gluu.org
    http:
      paths:
      - path: /.well-known/uma2-configuration
        backend:
          serviceName: oxauth
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gluu-ingress-webfinger
  namespace: gluu
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/webfinger /oxauth/.well-known/webfinger$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/.well-known/webfinger
spec:
  tls:
    - hosts:
      - demoexample.gluu.org
      secretName: tls-certificate
  rules:
  - host: demoexample.gluu.org
    http:
      paths:
      - path: /.well-known/webfinger
        backend:
          serviceName: oxauth
          servicePort: 8080

# ---

# apiVersion: extensions/v1beta1
# kind: Ingress
# metadata:
#   name: gluu-ingress-simple-web-discovery
#   namespace: gluu
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     nginx.ingress.kubernetes.io/ssl-redirect: "false"
#     nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
#     nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/simple-web-discovery /oxauth/.well-known/simple-web-discovery$1 break;"
#     nginx.ingress.kubernetes.io/rewrite-target: /oxauth/.well-known/simple-web-discovery
# spec:
#   tls:
#     - hosts:
#       - demoexample.gluu.org
#       secretName: tls-certificate
#   rules:
#   - host: demoexample.gluu.org
#     http:
#       paths:
#       - path: /.well-known/simple-web-discovery
#         backend:
#           serviceName: oxauth
#           servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gluu-ingress-scim-configuration
  namespace: gluu
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/scim-configuration /scim/restv1/scim/scim-configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /scim/restv1/scim/scim-configuration
spec:
  tls:
    - hosts:
      - demoexample.gluu.org
      secretName: tls-certificate
  rules:
  - host: demoexample.gluu.org
    http:
      paths:
      - path: /.well-known/scim-configuration
        backend:
          serviceName: scim
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gluu-ingress-fido-u2f-configuration
  namespace: gluu
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/fido-u2f-configuration /oxauth/restv1/fido-configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/restv1/fido-configuration
spec:
  tls:
    - hosts:
      - demoexample.gluu.org
      secretName: tls-certificate
  rules:
  - host: demoexample.gluu.org
    http:
      paths:
      - path: /.well-known/fido-u2f-configuration
        backend:
          serviceName: oxauth
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gluu-ingress-fido-configuration
  namespace: gluu
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/fido-configuration /oxauth/restv1/fido-configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /oxauth/restv1/fido-configuration
spec:
  tls:
    - hosts:
      - demoexample.gluu.org
      secretName: tls-certificate
  rules:
  - host: demoexample.gluu.org
    http:
      paths:
      - path: /.well-known/fido-configuration
        backend:
          serviceName: oxauth
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gluu-ingress-fido2-configuration
  namespace: gluu
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/fido2-configuration /fido2/restv1/fido2/configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /fido2/restv1/fido2/configuration
spec:
  tls:
    - hosts:
      - demoexample.gluu.org
      secretName: tls-certificate
  rules:
  - host: demoexample.gluu.org
    http:
      paths:
      - path: /.well-known/fido2-configuration
        backend:
          serviceName: fido2
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gluu-ingress
  namespace: gluu
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.org/ssl-services: "oxtrust"
    nginx.ingress.kubernetes.io/app-root: "/identity"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "route"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout invalid_header http_500 http_502 http_503 http_504"
spec:
  tls:
    - hosts:
      - demoexample.gluu.org
      secretName: tls-certificate
  rules:
  - host: demoexample.gluu.org
    http:
      paths:
      - path: /identity
        backend:
          serviceName: oxtrust
          servicePort: 8080
      - path: /idp
        backend:
          serviceName: oxshibboleth
          servicePort: 8080
      - path: /passport
        backend:
          serviceName: oxpassport
          servicePort: 8090
      - path: /casa
        backend:
          serviceName: casa
          servicePort: 8080
      - path: /oxauth
        backend:
          serviceName: oxauth
          servicePort: 8080
